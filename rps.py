"""
rps.py - (15 points extra credit)
=====

1. see the wikipedia article on how to play: https://en.wikipedia.org/wiki/Rock-paper-scissors
2. continually ask the user for a command (until the user types in q to quit)
    * the command can be r, p, s, h, or q
    * r, p, s correspond to rock, paper and scissors
    * h corresponds to history
    * q corresponds to quit
3. if the command is __r, p, or s__:
    * create a move for the computer
    * the computer's move should be generated by a function that you write
        * __this function should be placed in a module in a file separate from
          your actual program__ file; name the module __rpshelper.py__ 
        * implement a function called get_computer_move that takes two 
          parameters: a list called their_moves and a list called your_moves.
        * the variable, their_moves, represents the other player's moves, and 
          the variable your_moves represents the computer's moves. 
        * use the history of the player's moves determine what the next computer 
          move should be.
        * count how many r's, p's and s's are in the list of moves
        * play the move that will win against the __least__ frequently used move!
        * use this module and function in your main rps.py program
    * if it's a win, add a point to winner's (either player or computer) score
    * if it's a tie, don't add any points
    * print out both the player's move and the computer's move
    * print out who won
    * print out current point totals
4. if the command is __h__:
    * show a list of all of the computer's previous moves
    * show a list of all of the player's previous
5. if the command is __q__:
    * quit the game
6. ask for input again... (continually until the input is q)
7. you can add additional features to the game for more points (see below)


Example Output ('base' version of game):
-----

(Characters after > is user input)

(r)ock, (p)aper, (s)cissors, (h)istory or (q)uit
>r
PLAY: player: r, computer: p
computer wins
SCORE: player: 0, computer: 1
==========================================

(r)ock, (p)aper, (s)cissors, (h)istory or (q)uit
>s
PLAY: player: s, computer: p
player wins
SCORE: player: 1, computer: 1
==========================================

(r)ock, (p)aper, (s)cissors, (h)istory or (q)uit
>h
Player     Computer
------     --------
r          p
s          p
==========================================

(r)ock, (p)aper, (s)cissors, (h)istory or (q)uit
>r
PLAY: player: r, computer: r
tie
SCORE: player: 1, computer: 1
==========================================

(r)ock, (p)aper, (s)cissors, (h)istory or (q)uit
>q


"""

#Utkarsh Parasramka
#11/09/2015
#Section: 010

import rpshelper
answers = ['r', 'p', 's', 'h', 'q']
answer = 'r'
their_moves = []
your_moves = []
player_pts = 0
comp_pts = 0
while answer in answers:
    answer = input("(r)ock, (p)aper, (s)cissors, (h)istory or (q)uit?\n>")
    if answer == 'r':
        comp_move = rpshelper.get_computer_move(their_moves, your_moves)
        their_moves.append('r')
        print("PLAY: player: " + answer + ", computer: " + comp_move)
        if comp_move == 'r':
            print('tie')
        elif comp_move == 'p':
            print('computer wins')
            comp_pts += 1
        elif comp_move == 's':
            print('player wins')
            player_pts += 1
        print("SCORE: player: " + str(player_pts) + ", computer: " + str(comp_pts))
    elif answer == 'p':
        comp_move = rpshelper.get_computer_move(their_moves, your_moves)
        their_moves.append('p')
        print("PLAY: player: " + answer + ", computer: " + comp_move)
        if comp_move == 'p':
            print('tie')
        elif comp_move == 's':
            print('computer wins')
            comp_pts += 1
        elif comp_move == 'r':
            print('player wins')
            player_pts += 1
        print("SCORE: player: " + str(player_pts) + ", computer: " + str(comp_pts))
    elif answer == 's':
        comp_move = rpshelper.get_computer_move(their_moves, your_moves)
        their_moves.append('s')
        print("PLAY: player: " + answer + ", computer: " + comp_move)
        if comp_move == 's':
            print('tie')
        elif comp_move == 'r':
            print('computer wins')
            comp_pts += 1
        elif comp_move == 'p':
            print('player wins')
            player_pts += 1
        print("SCORE: player: " + str(player_pts) + ", computer: " + str(comp_pts))
    elif answer == 'h':
        rpshelper.history(their_moves, your_moves) #built another another function in rpshelper
    elif answer == 'q':
        break
    else:
        answer = 'r'
            
